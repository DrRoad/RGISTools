% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modCloudMask.R
\name{modCloudMask}
\alias{modCloudMask}
\title{Creates clouds layers for Modis images}
\usage{
modCloudMask(startDate, endDate, extent, out.name, raw.rm, ...)
}
\arguments{
\item{startDate}{starting date of the image time series in \code{Date} class. For instance, using any format from \code{as.Date} function.}

\item{endDate}{ending date of the image time series in \code{Date} class. For instance, using any format from \code{as.Date} function.}

\item{extent}{\code{Extent}, \code{Raster*}, \code{SpatialPolygons*}, \code{SpatialLines*} or 
\code{SpatialPoints*} object are acceptable formats as long as coordinates 
are in longitude/latitude format. This argument is mandatory if \code{polygon} 
or \code{lonlat} is not defined.}

\item{out.name}{the name of the region, if is not defined "outfile" will be assigned.}

\item{raw.rm}{logical argument. If \code{TRUE} region images are removed.}

\item{...}{argument to allow function nestering:
\itemize{
  \item \code{AppRoot} the directory where the extracted images should be located
}}

\item{out.name}{}

\item{verbose}{logical argument. If \code{TRUE} the function prints running stages and warnings.}
}
\description{
\code{modCloudMask} creates clouds layers derived from \code{MOD35_L2} products.
}
\details{
This function, downloads and process the \code{MOD35_L2} products to create clouds 
mask composed by \code{NA}s and \code{1}. The resulting cloud mask layers need to be
reprojected.
}
\examples{
\dontrun{
modCloudMask(startDate=as.Date("2017208","\%Y\%j"),
             endDate=as.Date("2017213","\%Y\%j"),
             extent=ex.navarre,
             AppRoot="D:/Downscaling/CloudMask2",
             out.name="Navarre")
cmask<-list.files("D:/Downscaling/CloudMask2",full.names = T,pattern = "\\\\.tif$")
a<-lapply(cmask,raster)
navarra.path<-list.files("D:/Downscaling/MOD09GA/Navarre",full.names = T,recursive=T,pattern = "\\\\.tif$")
navarra.path<-navarra.path[grepl("b01_1",navarra.path)]
b<-lapply(navarra.path,raster)
}

}
