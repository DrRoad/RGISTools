% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lsMosaic.R
\name{lsMosaic}
\alias{lsMosaic}
\title{Mosaics a set of Landsat images}
\usage{
lsMosaic(src, extent = NULL, out.name = "outfile", verbose = F,
  gutils = F, overwrite = F, ...)
}
\arguments{
\item{src}{the path of the folder with the Sentinel images in tif format}

\item{extent}{a character string with the name of the region of interest (optional)}

\item{out.name}{the name of the region, if is not defined "outfile" will be asigned}

\item{verbose}{flag for debugging}

\item{gutils}{a boolean flag to use GDAL utilities for mosaicking}

\item{overwrite}{a boolean flag to overwrite the existing merged images}

\item{...}{Argument for function nestering accepts:
 \itemize{
  \item \code{pathrow} a list with the path and row numbers for the region of interest
  \item \code{bandFilter} a vector with the name of the image bands to be mosaicked.
If it is not supplied, the function is applied to all the bands available in \code{src}
  \item \code{dayFilter} a vector containing the days in date format to filter the days wanted
  \item \code{AppRoot} the directory to save the mosaicked images
}}
}
\description{
\code{lsMosaic} merges the tiles of Landsat images covering a region of interest and returns a single image for each date
}
\details{
The function mosaics the tiles of satellite images in the \code{src} folder.
The function uses the folder resulting from the \code{lsDownload} function.
The folder may contain multiple tiles as tif files, for one or several
dates and one or several bands. When only one band has to be mosaicked,
the name of the band can be provided through the argument \code{bandFilter}. The
name of the band should be defined as a character string beginning with the
letter b and a two-digit band number (e.g. ‘b01’). Similarly, when only a
subset of dates has to be mosaicked, the date(s) should be provided through
the argument \code{dayFilter}. The dates must be provided as date objects. Once the
images are mosaicked, they are cropped using the extent defined by
\code{extent} (optional). The extent can be defined in any projection
format. The function \code{lsMosaic} automatically reprojects the extent to
match the projection of the image. The resulting images will be placed
in the \code{AppRoot} directory. The output files are named after region of
interest provided by the argument \code{out.name}. If no name is provided, by
default the output file is named as ‘outfile’.
}
\examples{
\dontrun{
#load a spatial polygon object of navarre for the example
data(ex.navarre)
#asign the folder where the example will be run
src<-"Path_for_downloading_folder"
#download landsat8 images
search<-lsDownload(satellite="ls8",
                   username="username",
                   password="password",
                   startDate=as.Date("01-01-2018","\%d-\%m-\%Y"),
                   endDate=as.Date("20-01-2018","\%d-\%m-\%Y"),
                   extent=ex.navarre,
                   untarDir="untar",
                   AppRoot=src)
#asign the folder with the landsat 8 images untared
tif.src<-file.path(src,"untar")
#mosaic the Landsat 8 images
lsMosaic(tif.src,
         AppRoot=src,
         out.name="Navarre")

lsMosaic(tif.src,
         AppRoot=src,
         out.name="Navarre",
         extent=ex.navarre,
         gutils=T,#using gdalUtils
         overwrite=T)#overwrite
}
}
